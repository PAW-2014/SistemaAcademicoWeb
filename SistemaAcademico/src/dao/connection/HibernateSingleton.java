package dao.connection;

import java.text.MessageFormat;

import model.AcademicFormation;
import model.Address;
import model.Coordinator;
import model.Discipline;
import model.PreferentialDiscipline;
import model.Principal;
import model.ProfessionalExperience;
import model.Professor;

import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;
import org.hibernate.service.ServiceRegistry;

public final class HibernateSingleton { // TODO Needs to clean up
	
	private HibernateSingleton(){
	}
	
	private final static String host = "localhost";
	private final static String port = "3306";
	private final static String schemaName = "AcademicSystem";
	
	private final static String baseUrl = "jdbc:mysql://{0}:{1}/{2}";
	
	private final static String url = MessageFormat.format(baseUrl, host, port, schemaName);
	private final static String driverClass = "com.mysql.jdbc.Driver";
	
	private final static String username = "root";
	private final static String password = "toor";
	
	public final static String PROPERTY_URL = "hibernate.connection.url";
	public final static String PROPERTY_USERNAME = "hibernate.connection.username";
	public final static String PROPERTY_PASSWORD = "hibernate.connection.password";
	public final static String PROPERTY_DRIVER_CLASS = "hibernate.connection.driver_class";
	
	/**Property that sets the data base dialect to hibernate*/
	public final static String PROPERTY_DIALECT = "hibernate.dialect";
	
	/**MySQL Dialect*/
	public  final static String HIBERNTE_MYSQL_DIALECT = "org.hibernate.dialect.MySQLDialect";
	
	/**Property to execute the Schema generated by hibernate.*/
	public final static String PROPERTY_AUTO_EXECUTE_SCHEMA = "hibernate.hbm2ddl.auto";
	
	/**Creates the Schema, destroying all the previous data.*/
	public final static String HIBERNTE_SCHEMA_CREATE_MODE = "create";
	
	/**Creates the Schema, and drop it at the end of the session.*/
	public final static String HIBERNTE_SCHEMA_CREATEDROP_MODE = "create-drop";
	
	/**Update the Schema, can destroy data if some attribute or class is deleted.*/
	public final static String HIBERNTE_SCHEMA_UPDATE_MODE = "update";
	
	/**Just validate the Schema, don't changing the data in it.*/
	public final static String HIBERNTE_SCHEMA_VALIDATE_MODE = "validate";
	
	public static final Configuration configuration = buildNewConfiguration();
	public static final ServiceRegistry serviceRegistry = buildNewServiceRegistry();
	public static final SessionFactory sessionFactory = buildNewSessionFactory(configuration, serviceRegistry);
	
	private static Configuration buildNewConfiguration(){
		Configuration configuration = new Configuration();
		addClasses(configuration);
		addProperties(configuration);
		
		return configuration;
	}
	
	private static void addClasses(Configuration configuration){
		configuration.addAnnotatedClass(Discipline.class);
		configuration.addAnnotatedClass(AcademicFormation.class);
		configuration.addAnnotatedClass(Address.class);
		configuration.addAnnotatedClass(Coordinator.class);
		configuration.addAnnotatedClass(Discipline.class);
		configuration.addAnnotatedClass(PreferentialDiscipline.class);
		configuration.addAnnotatedClass(Principal.class);
		configuration.addAnnotatedClass(ProfessionalExperience.class);
		configuration.addAnnotatedClass(Professor.class);
	}
	
	private static void addProperties(Configuration configuration){
		configuration.setProperty(PROPERTY_URL, url);
		configuration.setProperty(PROPERTY_USERNAME, username);
		configuration.setProperty(PROPERTY_PASSWORD, password);
		configuration.setProperty(PROPERTY_DRIVER_CLASS, driverClass);
		configuration.setProperty(PROPERTY_DIALECT, HIBERNTE_MYSQL_DIALECT);
		configuration.setProperty(PROPERTY_AUTO_EXECUTE_SCHEMA, HIBERNTE_SCHEMA_VALIDATE_MODE);
	}
	
	private static ServiceRegistry buildNewServiceRegistry(){
		return null;
	}
	
	private static SessionFactory buildNewSessionFactory(Configuration configuration, ServiceRegistry serviceRegistry){
		if(serviceRegistry != null)
			return configuration.buildSessionFactory(serviceRegistry);
		
		return configuration.buildSessionFactory();
	}
	
}
